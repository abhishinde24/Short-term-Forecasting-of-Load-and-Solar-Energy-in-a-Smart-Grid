from django.shortcuts import render
import numpy as np
import pandas as pd
import numpy as np
import pandas as pd
# import matplotlib.pyplot as plt

from math import sqrt
from multiprocessing import cpu_count
from joblib import Parallel
from joblib import delayed
from warnings import catch_warnings
from warnings import filterwarnings
#from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit

def heart(request):
    # def train_test_split(data, n_test):
    #     return data[:-n_test], data[-n_test:]
    #     #
    value=[]
    def sarima_forecast(history, config):
        order, sorder, trend = config
        # define model
        model = SARIMAX(history, order=order, seasonal_order=sorder, trend=trend, enforce_stationarity=False,enforce_invertibility=False)
        # fit model
        model_fit = model.fit(disp=False)
        # make one step forecast
        yhat = model_fit.predict(len(history), len(history))
        return yhat[0]

    #
    def walk_forward_validation(data, n_test, cfg):
        predictions = list()
        # split dataset
        train, test = train_test_split(data, n_test)
        # seed history with training dataset
        history = [x for x in train]
        # step over each time-step in the test set
        for i in range(len(test)):
            # fit model and make forecast for history
            yhat = sarima_forecast(history, cfg)
            # store forecast in list of predictions
            predictions.append(yhat)
            # add actual observation to history for the next loop
            history.append(test[i])
        # estimate prediction error
        return predictions

    df = pd.read_csv('static/DATA_maharashtra.csv')
    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1, 1)
        data = df['Maharashtra'].to_list()
        # converting into MWH
        data = data * 24
        # data split
        # n_test = 14
        # next days prediction

        # cfg_list = [(0,0,2),(1,0,2,0),'n']
        cfg_list = [(1, 2, 1), (2, 2, 2, 2), 't']
        # cfg_list = [(0, 0, 1), (2, 0, 0, 0), 't']
        # cfg_list = [(1,0,0),(2,0,1,0),'ct']

        prediction = walk_forward_validation(data,cp, cfg_list)
        value =prediction

        # if value.empty()== 1:
        #     value.append(1)
        # elif value.empty() == 0:
        #     value.append(0)


    return render(request,
                  'heart.html',
                  {
                      'context': value,
                      'title': 'Heart Disease Prediction',
                      'active': 'btn btn-success peach-gradient text-white',
                      'heart': True,
                      'background': 'bg-danger text-white'
                  })

def solarhelp(request):
    # def train_test_split(data, n_test):
    #     return data[:-n_test], data[-n_test:]
    #     #
    value=[]
    def sarima_forecast(history, config):
        order, sorder, trend = config
        # define model
        model = SARIMAX(history, order=order, seasonal_order=sorder, trend=trend, enforce_stationarity=False,enforce_invertibility=False)
        # fit model
        model_fit = model.fit(disp=False)
        # make one step forecast
        yhat = model_fit.predict(len(history), len(history))
        return yhat[0]

    #
    def walk_forward_validation(data, n_test, cfg):
        predictions = list()
        # split dataset
        train, test = train_test_split(data, n_test)
        # seed history with training dataset
        history = [x for x in train]
        # step over each time-step in the test set
        for i in range(len(test)):
            # fit model and make forecast for history
            yhat = sarima_forecast(history, cfg)
            # store forecast in list of predictions
            predictions.append(yhat)
            # add actual observation to history for the next loop
            history.append(test[i])
        # estimate prediction error
        return predictions

    df = pd.read_csv('static/DATA_maharashtra.csv')
    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1, 1)
        data = df['Maharashtra'].to_list()
        # converting into MWH
        data = data * 24
        # data split
        # n_test = 14
        # next days prediction

        # cfg_list = [(0,0,2),(1,0,2,0),'n']
        cfg_list = [(1, 2, 1), (2, 2, 2, 2), 't']
        # cfg_list = [(0, 0, 1), (2, 0, 0, 0), 't']
        # cfg_list = [(1,0,0),(2,0,1,0),'ct']

        prediction = walk_forward_validation(data,cp, cfg_list)
        value =prediction

        # if value.empty()== 1:
        #     value.append(1)
        # elif value.empty() == 0:
        #     value.append(0)


    return render(request,
                  'solarhelp.html',
                  {
                      'context': value,
                      'title': 'Heart Disease Prediction',
                      'active': 'btn btn-success peach-gradient text-white',
                      'heart': True,
                      'background': 'bg-danger text-white'
                  })

def solarandloadhelp(request):
    # def train_test_split(data, n_test):
    #     return data[:-n_test], data[-n_test:]
    #     #
    value=[]
    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1, 1)
        data = df['Maharashtra'].to_list()


        # cfg_list = [(0,0,2),(1,0,2,0),'n']
        cfg_list = [(1, 2, 1), (2, 2, 2, 2), 't']


        prediction = walk_forward_validation(data,cp, cfg_list)
        value =prediction

        # if value.empty()== 1:
        #     value.append(1)
        # elif value.empty() == 0:
        #     value.append(0)


    return render(request,
                  'solarandloadhelp.html',
                  {
                      'context': value,
                      'title': 'Heart Disease Prediction',
                      'active': 'btn btn-success peach-gradient text-white',
                      'heart': True,
                      'background': 'bg-danger text-white'
                  })

def home(request):

    return render(request,
                  'index.html')
def graph(request):
    value=[]
    value2= []
    # cp= 0
    value1 =[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    # v= [1074.39,687.37,771.33,986.57,900.82,968.70,865.26,906.43,1310.02,1354.02,1134.63,1276.06,1044.86,1165.17]
    v=[40763.0885137159, 34130.8688865186, 31137.0401754673, 32961.5387430252, 35508.1481943321, 33598.9478065238, 32601.4914433058, 37712.6881535708, 34983.5135177639, 32476.5658833339, 43550.3205921253, 42564.857857598, 48578.0684864767, 50522.4506929359, 47860.5783526312, 43642.9260094508, 48005.4328248646, 49253.5371558472, 42234.52639606, 50047.9648609751, 40578.7600504133, 43781.5229545926, 39226.8869644845, 36592.2842106574, 35984.8130625423, 35470.8555631311, 28701.5932722439, 35294.3245583274, 39731.3549836023, 41266.5051250973, 45965.1915671036, 54627.3859224821, 58854.8879992439, 47235.8357060879, 54714.1534833659
]
    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1, 1)
    value = v[:cp]
    value2= value1[:cp]
    return render(request,
                  'graph.html',{
                      'context': value,
                        'c':cp,
                        'z':value2
                  })

def solar(request):
    value=[]
    value2= []
    value1 =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]
    v= [1247494.2, 1251389.2, 1257232.9, 1255400.2, 1253776.9, 1266715.8, 1265744.4, 1261318.6, 1265250.8, 1271143.6, 1269281.5, 1267645.6, 1280723.6, 1279739.8, 1270315.2, 1274269.1, 1280186.2, 1278300.2, 1276660.1, 1289827.1, 1288834.8, 1278890.5, 1282872.4, 1288830.2, 1286933.9, 1285287.4, 1298545.4, 1297547.4, 1284639.9, 1288632.6, 1294599.9, 1292683.8, 1291033.2, 1304344.6, 1303339.8
]
    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1, 1)
    value = v[:cp]
    value2= value1[:cp]
    return render(request,
                  'solar.html',{
                      'context': value,
                        'c':cp,
                        'z':value2
                  })

def solarandload(request):
    value=[]
    value2= []
    value3 = []
    v1= [731.4,726.13,723.23,722.39,722.64,722.61,722.6104,730.3825,725.8956,723.7764,722.8885,723.1372,723.1044,723.1069,681.0554,678.295,674.5712,673.7346,674.0176,673.9831,673.984,740.8795,731.436,727.3115,726.5281,726.7971,726.7597,726.7617,780.033,771.7045,767.5848,766.5869,766.9173,766.874,766.8765,798.7378,788.6519,784.8853,783.8155,784.1414,784.0983,784.1019,741.7065,735.6206,729.2442,728.2888,728.6131,728.5749,728.5752,707.8057,697.1424,690.5407,689.8384,690.0999,690.0651,690.0651,671.6013,678.4927,676.1878,674.8348,675.1102,675.0706,675.0742,734.4189,713.4442,707.4092,706.8187,707.2048,707.1469,707.1511,619.2719,637.176,638.5916,636.9336,637.2524,637.2271,637.2276,625.0425,615.2827,610.236,609.5238,609.7615,609.728,609.7301,494.4749,526.2871,544.7863,552.7273,559.3442,564.1254,567.494,576.8608,573.3828,570.2304,569.278,569.5873,569.5981,569.6232,595.0282,584.4789,576.7919,576.2365,576.5986,576.5555,576.5568,608.4222,594.5029,585.5613,585.1809,585.5677,585.5255,585.52,523.4379,538.8793,560.4674,568.2643,576.1559,582.3713,587.2766,585.5307,575.697,571.0851,570.6364,571.3032,571.6069,571.8787,550.9591,553.4955,554.78,554.8277,555.5776,556.1287,556.6185,526.9926,540.8641,551.5119,556.3097,561.5714,565.6582,568.8906,497.6992,528.4847,556.4044,566.8217,576.4965,583.4238,587.9785,566.8003,556.0309,554.8195,556.835,560.0769,562.4509,564.4803,585.7317,592.6426,595.0057,594.2487,594.3575,594.3457,594.3469,581.733,593.3703,596.5125,595.6464,595.7736,595.7598,595.7612,597.5746,608.4451,611.5779,610.767,610.8922,610.8808,610.8826,586.74,590.6718,594.1371,593.5939,593.6685,593.6612,593.6619,545.5238,562.0534,566.6498,565.7494,565.8827,565.8687,565.87,560.926,572.6935,576.8474,576.1285,576.2318,576.2212,576.2222,599.4586,598.2835,600.2553,599.9251,599.9962,599.9872,599.9887,595.1466,599.4001,603.8061,603.2292,603.3088,603.301,603.3016,602.7191,602.5822,601.8971,601.4634,601.5466,601.5317,601.5331,587.665,597.7757,601.9147,601.3864,601.5465,601.532,601.5348,552.5251,552.9948,561.1351,560.3077,560.4252,560.4143,560.4152,541.202,543.6299,550.5844,549.8623,549.9657,549.9561,549.9569,551.8633,555.585,556.4189,555.9255,555.9572,555.9536,555.9537,555.299,561.0844,561.2192,559.2095,557.4573,558.0854,559.1711,426.1155,429.0005,437.901,437.61,437.703,437.7624,437.8127,416.8675,420.3553,430.5253,430.047,430.1246,430.1633,430.1972,487.1781,489.9119,489.9339,490.2798,490.784,491.1897,491.5348,408.9791,434.6963,457.8817,463.7732,467.1173,469.5381,471.3772,500.2772,501.16,510.1617,509.4385,509.5598,509.5945,509.6257,459.4266,466.3785,474.9102,474.459,474.5215,474.5191,474.5192,474.3333,475.2662,479.1674,479.075,479.0669,479.066,479.0658,477.7828,478.159,483.1649,483.0364,483.0309,483.0295,483.0293,508.9983,504.7012,508.0664,507.8679,507.8673,507.8668,507.8667,540.712,543.7501,546.6712,546.5933,546.6019,546.6021,546.602,557.7932,559.6832,562.584,562.3455,562.3744,562.3723,562.3724,575.8552,579.6068,581.7515,581.4332,581.4857,581.4787,581.4799,599.5007,600.1572,600.5644,600.3129,600.343,600.3388,600.3392,634.4475,639.7874,644.532,643.6566,643.8257,643.8085,643.8117,666.3987,666.0228,667.0926,666.3258,666.5363,666.5091,666.5118,696.7182,692.676,691.558,690.7763,690.987,690.958,690.9601,702.5882,701.4359,701.6726,700.8018,701.0317,701.0024,701.0049,720.1019,717.6719,717.6069,716.7413,716.9793,716.9486,716.9514,625.6177,659.6695,667.2871,665.3807,665.7414,665.7094,665.7147,786.3997,772.7093,768.6542,767.5678,767.843,767.8038,767.8063,792.8831,784.19,780.7417,779.617,779.9278,779.8865,779.8899,804.8223,795.452,791.5085,790.3262,790.6416,790.5997,790.6028,764.083,760.5601,754.9471,753.9162,754.2753,754.2334,754.2346,748.0064,736.9752,729.9775,729.1119,729.4465,729.4028,729.4038,733.8227,722.3501,715.6885,714.888,715.1777,715.1392,715.1393,752.8541,740.5329,733.8939,733.0126,733.3348,733.2925,733.293,651.6583,664.5253,663.3395,661.8532,662.218,662.183,662.184,739.4966,714.874,708.8481,708.343,708.7592,708.6897,708.6962,705.1354,698.7523,694.2777,693.4102,693.7231,693.6841,693.6854,727.4321,718.1164,713.1776,712.4271,712.6975,712.6626,712.6627,614.8023,602.8725,598.0803,597.9689,598.1816,598.2094,598.2433,676.3875,661.8992,655.6925,655.1917,655.4072,655.3742,655.374,452.5916,519.9598,550.4688,557.1502,563.4999,568.434,572.3121,492.6307,536.2763,561.2865,570.1857,578.0198,583.3575,587.6107,457.2307,507.9441,542.5486,554.3877,565.2072,573.6534,580.3077,549.1759,554.6112,567.2958,574.0634,580.8201,585.7866,589.2515,545.7117,565.2136,573.9516,574.7957,577.5152,579.9011,582.1635,569.7729,572.7598,574.5604,573.9468,574.0408,574.0305,574.0316,515.9002,548.8278,558.6905,558.5579,559.5648,560.2411,560.9983,438.1515,495.6481,523.664,528.5582,533.6076,536.9177,540.1351,632.0479,623.9269,623.5589,623.4071,623.4874,623.4772,623.4787,665.0584,667.1796,669.9658,669.1783,669.325,669.3095,669.312,639.4354,644.703,648.6688,647.8098,647.9556,647.94,647.9426,610.3707,618.0632,624.8549,623.8299,623.9737,623.9588,623.9602,610.4918,614.8456,620.3898,619.561,619.6895,619.6757,619.6782,593.7523,598.5126,603.7696,603.0438,603.1452,603.135,603.1359,586.1268,588.6843,595.6198,594.7658,594.8852,594.8734,594.8745,570.9657,573.858,581.4271,580.5108,580.6389,580.6263,580.6274,549.9427,548.4947,550.9682,550.9087,550.9099,550.9113,550.9111,527.8278,528.1108,531.2648,531.0595,531.0794,531.0786,531.0787,492.0526,488.3512,491.0501,490.6313,490.668,490.664,490.6643,477.9259,481.9314,486.5302,486.3387,486.3398,486.3374,486.3373,468.5862,476.2812,481.5544,481.2397,481.2747,481.2731,481.2732,465.2853,468.8316,474.1601,473.9033,473.9251,473.9243,473.9243,458.3352,459.8279,464.6738,464.5156,464.5135,464.5111,464.511,450.3905,449.8886,454.6782,454.5387,454.5349,454.5332,454.533,452.0392,452.2035,457.8868,457.6971,457.7116,457.7116,457.7116,456.4225,463.0273,472.513,473.2806,474.1787,474.9124,475.5268,459.8048,467.3312,473.3055,472.9307,472.9546,472.9521,472.9521,511.3185,509.5913,511.6013,511.6152,511.5948,511.5957,511.5956,512.0964,518.342,524.382,524.1149,524.1523,524.1512,524.1512,538.9263,540.4604,546.7005,546.2822,546.3543,546.3489,546.3494,541.8698,546.3233,552.4393,552.1407,552.1838,552.1823,552.1823,600.8964,593.4309,589.7839,589.605,589.7253,589.713,589.7103,618.7974,624.6245,628.1726,627.5209,627.6503,627.637,627.6393,642.9298,645.0956,650.0962,649.361,649.5031,649.4887,649.4913,542.3303,549.4601,550.9372,549.9469,549.0338,548.2459,547.549,703.0314,696.4909,694.6378,693.9689,694.1638,694.136,694.1379,732.1514,725.2424,722.9578,722.2083,722.4431,722.4103,722.4129,729.144,725.543,724.1519,723.2864,723.5252,723.4939,723.4964,747.5736,743.3513,741.4993,740.6588,740.9018,740.8699,740.8724,767.5159,762.2875,759.7415,758.8242,759.112,759.0739,759.0772,773.2038,767.7905,765.1047,764.1607,764.4485,764.4105,764.4138,788.1709,782.009,779.2888,778.3537,778.6201,778.585,778.5877,765.2197,766.1314,765.5776,764.4158,764.6963,764.6625,764.6653,753.8859,741.804,736.396,735.594,735.9294,735.8842,735.8857,767.7086,761.3648,755.7321,754.8156,755.1652,755.1226,755.1235,774.2333,766.9261,761.5159,760.5933,760.9518,760.9075,760.9089,750.513,748.3274,743.2832,742.1834,742.5214,742.4837,742.4844]
    l= len(v1)
    # cp= 0
    value1 =[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    v= [10745.39,6877.37,7716.33,9868.57,9007.82,9684.70,8658.26,9067.43,13102.02,13541.02,11345.63,12766.06,10445.86,11656.17]

    # for i in range(0, cp):
    #     value3=v[i]-v1[l-1-i]

    if request.method == 'POST':
        cp = int(request.POST['cp'])
        user_data = np.array(cp).reshape(1,1)
    value = value3[:cp]
    value2= value1[:cp]
    return render(request,
                  'solarandload.html',{
                      'context': value,
                        'c':cp,
                        'z':value2
                  })
def handler404(request):
    return render(request, '404.html', status=404)
